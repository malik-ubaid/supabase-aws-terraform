{{- if .Values.storage.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "supabase.fullname" . }}-storage
  labels:
    {{- include "supabase.labels" . | nindent 4 }}
    app.kubernetes.io/component: storage
spec:
  replicas: {{ .Values.storage.replicaCount }}
  selector:
    matchLabels:
      {{- include "supabase.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: storage
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "supabase.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: storage
    spec:
      {{- with .Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: supabase-storage
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: storage
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.storage.image.repository }}:{{ .Values.storage.image.tag }}"
          imagePullPolicy: {{ .Values.storage.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 5000
              protocol: TCP
          env:
            - name: ANON_KEY
              valueFrom:
                secretKeyRef:
                  name: supabase-secrets
                  key: anon-key
            - name: SERVICE_KEY
              valueFrom:
                secretKeyRef:
                  name: supabase-secrets
                  key: service-role-key
            - name: POSTGREST_URL
              value: "http://{{ include "supabase.fullname" . }}-postgrest:3000"
            - name: PGRST_JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: supabase-secrets
                  key: jwt-secret
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: supabase-config
                  key: database_url
            - name: FILE_SIZE_LIMIT
              value: "52428800"
            - name: STORAGE_BACKEND
              value: "s3"
            - name: GLOBAL_S3_BUCKET
              valueFrom:
                configMapKeyRef:
                  name: supabase-config
                  key: S3_BUCKET
            - name: AWS_DEFAULT_REGION
              valueFrom:
                configMapKeyRef:
                  name: supabase-config
                  key: S3_REGION
            - name: S3_REGION
              valueFrom:
                configMapKeyRef:
                  name: supabase-config
                  key: S3_REGION
            - name: S3_ENDPOINT
              value: "https://s3.eu-west-1.amazonaws.com"
            - name: TENANT_ID
              value: "stub"
            - name: REGION
              valueFrom:
                configMapKeyRef:
                  name: supabase-config
                  key: REGION
            - name: MULTITENANT
              value: "false"
          volumeMounts:
            - name: tmp
              mountPath: /tmp
          resources:
            {{- toYaml .Values.storage.resources | nindent 12 }}
          readinessProbe:
            httpGet:
              path: /status
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /status
              port: http
            initialDelaySeconds: 60
            periodSeconds: 30
      volumes:
        - name: tmp
          emptyDir: {}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}